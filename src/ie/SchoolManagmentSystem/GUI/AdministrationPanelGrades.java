/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.SchoolManagmentSystem.GUI;

import java.awt.CardLayout;
import java.awt.LayoutManager;
import javax.swing.JOptionPane;
import ie.SchoolManagmentSystem.Grades;
import java.awt.event.KeyEvent;

/**
 * AdministrationPanelGrades.java
 * @author D. Whelan
 * JPANEL for viewing details of grades
 */
public class AdministrationPanelGrades extends javax.swing.JPanel {
    
        Grades grd[];
        int count = 0;
        
    /**
     * Creates new form AdministrationPanelGrades
     */
    public AdministrationPanelGrades() {
        initComponents();
        
        btnFinishEdit.setVisible(false);
        
        grd = new Grades[100];
        count = 0; 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblGrades = new javax.swing.JLabel();
        lblMaths = new javax.swing.JLabel();
        lblScience = new javax.swing.JLabel();
        lblGrade = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        lblTechnology = new javax.swing.JLabel();
        txtSciGrade = new javax.swing.JTextField();
        txtTechGrade = new javax.swing.JTextField();
        txtMathsGrade = new javax.swing.JTextField();
        lblFeedback = new javax.swing.JLabel();
        txtMathFeedBack = new javax.swing.JTextField();
        txtSciFeedBack = new javax.swing.JTextField();
        txtTechFeedBack = new javax.swing.JTextField();
        txtStudent = new javax.swing.JTextField();
        txtClass = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        lblClass = new javax.swing.JLabel();
        lblStudent = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnDisplay = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnFinishEdit = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        setForeground(new java.awt.Color(204, 204, 204));
        setLayout(null);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        btnBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBackKeyPressed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(100, 520, 100, 28);

        lblGrades.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblGrades.setForeground(new java.awt.Color(204, 204, 204));
        lblGrades.setText("Grades");
        add(lblGrades);
        lblGrades.setBounds(210, 30, 100, 29);

        lblMaths.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblMaths.setForeground(new java.awt.Color(204, 204, 204));
        lblMaths.setText("Maths");
        add(lblMaths);
        lblMaths.setBounds(130, 270, 50, 17);

        lblScience.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblScience.setForeground(new java.awt.Color(204, 204, 204));
        lblScience.setText("Science");
        add(lblScience);
        lblScience.setBounds(120, 310, 60, 17);

        lblGrade.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblGrade.setForeground(new java.awt.Color(204, 204, 204));
        lblGrade.setText("Grade");
        add(lblGrade);
        lblGrade.setBounds(200, 230, 50, 17);

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveKeyPressed(evt);
            }
        });
        add(btnSave);
        btnSave.setBounds(300, 520, 100, 28);

        lblTechnology.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTechnology.setForeground(new java.awt.Color(204, 204, 204));
        lblTechnology.setText("Technology");
        add(lblTechnology);
        lblTechnology.setBounds(100, 350, 80, 17);
        add(txtSciGrade);
        txtSciGrade.setBounds(200, 300, 50, 28);
        add(txtTechGrade);
        txtTechGrade.setBounds(200, 340, 50, 28);
        add(txtMathsGrade);
        txtMathsGrade.setBounds(200, 260, 50, 28);

        lblFeedback.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFeedback.setForeground(new java.awt.Color(204, 204, 204));
        lblFeedback.setText("Feedback");
        add(lblFeedback);
        lblFeedback.setBounds(300, 230, 80, 17);
        add(txtMathFeedBack);
        txtMathFeedBack.setBounds(300, 260, 130, 28);
        add(txtSciFeedBack);
        txtSciFeedBack.setBounds(300, 300, 130, 28);
        add(txtTechFeedBack);
        txtTechFeedBack.setBounds(300, 340, 130, 28);
        add(txtStudent);
        txtStudent.setBounds(260, 80, 130, 28);
        add(txtClass);
        txtClass.setBounds(260, 120, 130, 28);
        add(txtYear);
        txtYear.setBounds(260, 160, 130, 28);

        lblClass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblClass.setForeground(new java.awt.Color(204, 204, 204));
        lblClass.setText("Class");
        add(lblClass);
        lblClass.setBounds(190, 130, 60, 17);

        lblStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudent.setForeground(new java.awt.Color(204, 204, 204));
        lblStudent.setText("Student");
        add(lblStudent);
        lblStudent.setBounds(170, 90, 60, 17);

        lblYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblYear.setForeground(new java.awt.Color(204, 204, 204));
        lblYear.setText("Year");
        add(lblYear);
        lblYear.setBounds(200, 170, 50, 17);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        btnRemove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnRemoveKeyPressed(evt);
            }
        });
        add(btnRemove);
        btnRemove.setBounds(50, 470, 100, 28);

        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });
        btnDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDisplayKeyPressed(evt);
            }
        });
        add(btnDisplay);
        btnDisplay.setBounds(350, 470, 100, 28);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        btnSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSearchKeyPressed(evt);
            }
        });
        add(btnSearch);
        btnSearch.setBounds(200, 470, 100, 28);

        btnFinishEdit.setText("Finish Edit");
        btnFinishEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishEditActionPerformed(evt);
            }
        });
        btnFinishEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFinishEditKeyPressed(evt);
            }
        });
        add(btnFinishEdit);
        btnFinishEdit.setBounds(200, 420, 100, 28);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/SchoolManagmentSystem/GUI/ExamsAppBackground.png"))); // NOI18N
        add(lblBackground);
        lblBackground.setBounds(0, 0, 500, 700);
    }// </editor-fold>//GEN-END:initComponents

//MouseClick-Back    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
    //Navigates back to Admin 
        LayoutManager layout = getParent().getLayout();
        if (layout instanceof CardLayout) {
            CardLayout cl = (CardLayout)layout;
            cl.show(getParent(), "ADMIN");
        }
    }//GEN-LAST:event_btnBackActionPerformed

//MouseClick-Remove     
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    //deletes user from array
        String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;     
        Grades g;
        //Sets text from fields to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();
        mathsGrade = txtMathsGrade.getText();
        sciGrade = txtSciGrade.getText();
        techGrade = txtTechGrade.getText();
        mathFeedBack = txtMathFeedBack.getText();
        sciFeedBack = txtSciFeedBack.getText();
        techFeedBack = txtTechFeedBack.getText();  
        //If no information is entered to text fields        
        if(student.isEmpty() && sClass.isEmpty() && year.isEmpty() && mathsGrade.isEmpty() && sciGrade.isEmpty() && techGrade.isEmpty() && mathFeedBack.isEmpty() && sciFeedBack.isEmpty() && techFeedBack.isEmpty()) {           
            JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }               
        //If only part information is entered to text fields        
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText(""); 
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
            JOptionPane.showMessageDialog(null, "You need to fill all fields to add a grade for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }   
       
        /*
         *code modified from http://stackoverflow.com/questions/8396870/joptionpane-yes-or-no-window
         */
        
        //Removes Attendance
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Delete user", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "User Removed from database", "Attention!", JOptionPane.WARNING_MESSAGE); 
            for (int i=0; i < count; i++){ 
                g = grd[i];
                if (student.equals(g.getStudent()) && sClass.equals(g.getsClass()) && year.equals(g.getYear()) && mathsGrade.equals(g.getStudent()) && sciGrade.equals(g.getsClass()) && techGrade.equals(g.getYear()) && mathFeedBack.equals(g.getStudent()) && sciFeedBack.equals(g.getsClass()) && techFeedBack.equals(g.getYear())){                
                    grd[i] = grd[count-1];
                    grd[count-1] = null;
                    count--;           
                }               
            } 
            //Clears text
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText(""); 
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
        }
        //Clears text
        else {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText(""); 
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
        }  
        
    }//GEN-LAST:event_btnRemoveActionPerformed

//MouseClick-Display     
    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
    //Displays all atttendance to user    
        String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;
        Grades g;    
        //if no user have been saved
        if(count == 0){  
            JOptionPane.showMessageDialog(null, "There are no grades saved yet.", "Attention!", JOptionPane.WARNING_MESSAGE);
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");        
        }  
        //Displays all attendance 
        for (int i=0; i < count; i++){   
            g = grd[i];
            student = g.getStudent();
            sClass = g.getsClass();
            year = g.getYear();
            mathsGrade = g.getMathsGrade();
            sciGrade = g.getSciGrade();
            techGrade = g.getTechGrade();
            mathFeedBack = g.getMathFeedBack();
            sciFeedBack = g.getSciFeedBack();
            techFeedBack = g.getTechFeedBack();
            JOptionPane.showMessageDialog(null, "Student: "+student+"\nClass: "+sClass+"\nYear: "+year+"\n\nMaths grade: "+mathsGrade+"\nFeedback: "+mathFeedBack+"\n\nScience grade: "+sciGrade+"\nFeedback: "+sciFeedBack+"\n\nTechnology grade: "+techGrade+"\nFeedback: "+techFeedBack, "Student Information", JOptionPane.PLAIN_MESSAGE);            
            //Clears text fields
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
        }
        
    }//GEN-LAST:event_btnDisplayActionPerformed

//MouseClick-Search      
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
    /*
     *Searches for matches in array and displays match to user.
     *Gives option to exit or edit.
     *On edit the searched user is deleted and details left in text fields to edit. 
     *All buttons are hidden bar "finish Edit" which save the edited user back to the array.
     */
        String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack; 
        Grades g;
        
        //Sets text from fields to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();
        mathsGrade = txtMathsGrade.getText();
        sciGrade = txtSciGrade.getText();
        techGrade = txtTechGrade.getText();
        mathFeedBack = txtMathFeedBack.getText();
        sciFeedBack = txtSciFeedBack.getText();
        techFeedBack = txtTechFeedBack.getText();  
        
        //If there are no attendance in array
        if(count == 0) {   
            JOptionPane.showMessageDialog(null, "Nothing to show");
            return;
        }
        //If no information is entered
        else if(student.isEmpty() && sClass.isEmpty() && year.isEmpty() && mathsGrade.isEmpty() && sciGrade.isEmpty() && techGrade.isEmpty() && mathFeedBack.isEmpty() && sciFeedBack.isEmpty() && techFeedBack.isEmpty()) {           
            JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }               
        //If any information is missing        
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText(""); 
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
            JOptionPane.showMessageDialog(null, "You need to fill all fields to add grades for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        } 
        //Finds match        
        for (int i=0; i < count; i++){ 
            g = grd[i];
            if (student.equals(g.getStudent()) && sClass.equals(g.getsClass()) && year.equals(g.getYear()) && mathsGrade.equals(g.getStudent()) && sciGrade.equals(g.getsClass()) && techGrade.equals(g.getYear()) && mathFeedBack.equals(g.getStudent()) && sciFeedBack.equals(g.getsClass()) && techFeedBack.equals(g.getYear())){
                student = g.getStudent();
                sClass = g.getsClass();
                year = g.getYear();
                mathsGrade = g.getMathsGrade();
                sciGrade =g.getSciGrade();
                techGrade = g.getTechGrade();
                mathFeedBack = g.getMathFeedBack();
                sciFeedBack = g.getSciFeedBack();
                techFeedBack = g.getTechFeedBack();
                //Displays result, gives ok or edit option
                Object[] options = {"Edit","ok"};
                int reply = JOptionPane.showOptionDialog(null,"Student: "+student+"\nClass: "+sClass+"\nYear: "+year+"\n\nMaths grade: "+mathsGrade+"\nFeedback: "+mathFeedBack+"\n\nScience grade: "+sciGrade+"\nFeedback: "+sciFeedBack+"\n\nTechnology grade: "+techGrade+"\nFeedback: "+techFeedBack,"Search results",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                //If edit is selected then search results populate the text fields
                if(reply == JOptionPane.YES_OPTION) {
                    txtStudent.setText(student);
                    txtClass.setText(sClass);
                    txtYear.setText(year);
                    txtMathsGrade.setText(mathsGrade);
                    txtSciGrade.setText(sciGrade);
                    txtTechGrade.setText(techGrade);
                    txtMathFeedBack.setText(mathFeedBack);
                    txtSciFeedBack.setText(sciFeedBack);
                    txtTechFeedBack.setText(techFeedBack); 
                    //Removes matched result from array
                    for (int j=0; j < count; j++){ 
                    g = grd[j];
                        if (student.equals(g.getStudent()) && sClass.equals(g.getsClass()) && year.equals(g.getYear()) && mathsGrade.equals(g.getStudent()) && sciGrade.equals(g.getsClass()) && techGrade.equals(g.getYear()) && mathFeedBack.equals(g.getStudent()) && sciFeedBack.equals(g.getsClass()) && techFeedBack.equals(g.getYear())){                 
                            grd[j] = grd[count-1];
                            grd[count-1] = null;
                            count--;           
                        }               
                    }  
                    //Shows "finish edit" button hides others
                    btnFinishEdit.setVisible(true);
                    btnRemove.setVisible(false);
                    btnDisplay.setVisible(false);
                    btnSearch.setVisible(false);
                    btnSave.setVisible(false);
                    btnBack.setVisible(false);
                }
                //ok is selected, clears text and returns
                if(reply == JOptionPane.NO_OPTION) { 
                    txtStudent.setText("");
                    txtClass.setText("");
                    txtYear.setText(""); 
                    txtMathsGrade.setText("");
                    txtSciGrade.setText("");
                    txtTechGrade.setText("");
                    txtMathFeedBack.setText("");
                    txtSciFeedBack.setText("");
                    txtTechFeedBack.setText("");
                    return;
                }
            } 
            else{
                JOptionPane.showMessageDialog(null, "No such user", "Attention!", JOptionPane.WARNING_MESSAGE);
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
            }
        }  
        
    }//GEN-LAST:event_btnSearchActionPerformed

//MouseClick-Add        
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    //Adds new attendance to array  
        String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;
        Grades g;
        
        //If all text fields are empty
        if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty() && txtMathsGrade.getText().isEmpty() && txtSciGrade.getText().isEmpty() && txtTechGrade.getText().isEmpty() && txtMathFeedBack.getText().isEmpty() && txtSciFeedBack.getText().isEmpty() && txtTechFeedBack.getText().isEmpty()) {           
            JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //If fields are part filled
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText(""); 
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
            JOptionPane.showMessageDialog(null, "You need to fill all fields to add a grade for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }        
        //Sets text from fields to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();
        mathsGrade = txtMathsGrade.getText();
        sciGrade = txtSciGrade.getText();
        techGrade = txtTechGrade.getText();
        mathFeedBack = txtMathFeedBack.getText();
        sciFeedBack = txtSciFeedBack.getText();
        techFeedBack = txtTechFeedBack.getText();
        //makes new instance
        g = new Grades (student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack);
        
        JOptionPane.showMessageDialog(null, "Successfully added \""+student+"\" grades and feedback to database.", "Congratulations", JOptionPane.PLAIN_MESSAGE);
        
        grd[count] = g;
        count++; 
        //Clears text
        txtStudent.setText("");
        txtClass.setText("");
        txtYear.setText("");
        txtMathsGrade.setText("");
        txtSciGrade.setText("");
        txtTechGrade.setText("");
        txtMathFeedBack.setText("");
        txtSciFeedBack.setText("");
        txtTechFeedBack.setText("");
                
    }//GEN-LAST:event_btnSaveActionPerformed

//MouseClick-FinishEdit
    private void btnFinishEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishEditActionPerformed
    //Adds newly edited grades to array  
        
        String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;
        Grades g;
        //If all text fields are empty
        if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty() && txtMathsGrade.getText().isEmpty() && txtSciGrade.getText().isEmpty() && txtTechGrade.getText().isEmpty() && txtMathFeedBack.getText().isEmpty() && txtSciFeedBack.getText().isEmpty() && txtTechFeedBack.getText().isEmpty()) {           
            JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //If fields are part filled
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText(""); 
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
            JOptionPane.showMessageDialog(null, "You need to fill all fields to add a grade for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }        
        //saves new edited user to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();
        mathsGrade = txtMathsGrade.getText();
        sciGrade = txtSciGrade.getText();
        techGrade = txtTechGrade.getText();
        mathFeedBack = txtMathFeedBack.getText();
        sciFeedBack = txtSciFeedBack.getText();
        techFeedBack = txtTechFeedBack.getText();
        //makes new instance
        g = new Grades (student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack);

        JOptionPane.showMessageDialog(null, "Successfully edited \""+student+"\" and saved to database.", "Congratulations", JOptionPane.PLAIN_MESSAGE);
        
        grd[count] = g;
        count++; 
        //clears text fields
        txtStudent.setText("");
        txtClass.setText("");
        txtYear.setText("");
        txtMathsGrade.setText("");
        txtSciGrade.setText("");
        txtTechGrade.setText("");
        txtMathFeedBack.setText("");
        txtSciFeedBack.setText("");
        txtTechFeedBack.setText("");
        //Changes visability of other options back
        btnFinishEdit.setVisible(false);
        btnRemove.setVisible(true);
        btnDisplay.setVisible(true);
        btnSearch.setVisible(true);
        btnSave.setVisible(true);
        btnBack.setVisible(true);
        
    }//GEN-LAST:event_btnFinishEditActionPerformed

//Keypress-Enter-Remove    
    private void btnRemoveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnRemoveKeyPressed
    //deletes user from array    
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){     
            String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;     
            Grades g;
            //Sets text from fields to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();
            mathsGrade = txtMathsGrade.getText();
            sciGrade = txtSciGrade.getText();
            techGrade = txtTechGrade.getText();
            mathFeedBack = txtMathFeedBack.getText();
            sciFeedBack = txtSciFeedBack.getText();
            techFeedBack = txtTechFeedBack.getText();  
            //If no information is entered to text fields        
            if(student.isEmpty() && sClass.isEmpty() && year.isEmpty() && mathsGrade.isEmpty() && sciGrade.isEmpty() && techGrade.isEmpty() && mathFeedBack.isEmpty() && sciFeedBack.isEmpty() && techFeedBack.isEmpty()) {           
                JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }               
            //If only part information is entered to text fields        
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
                JOptionPane.showMessageDialog(null, "You need to fill all fields to add a grade for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }   

            /*
             *code modified from http://stackoverflow.com/questions/8396870/joptionpane-yes-or-no-window
             */

            //Removes Attendance
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Delete user", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "User Removed from database", "Attention!", JOptionPane.WARNING_MESSAGE); 
                for (int i=0; i < count; i++){ 
                    g = grd[i];
                    if (student.equals(g.getStudent()) && sClass.equals(g.getsClass()) && year.equals(g.getYear()) && mathsGrade.equals(g.getStudent()) && sciGrade.equals(g.getsClass()) && techGrade.equals(g.getYear()) && mathFeedBack.equals(g.getStudent()) && sciFeedBack.equals(g.getsClass()) && techFeedBack.equals(g.getYear())){                
                        grd[i] = grd[count-1];
                        grd[count-1] = null;
                        count--;           
                    }               
                } 
                //Clears text
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
            }
            //Clears text
            else {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
            }   
        }
        
    }//GEN-LAST:event_btnRemoveKeyPressed

//Keypress-Enter-Display    
    private void btnDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDisplayKeyPressed
    //Displays all atttendance to user   
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){   
            String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;
            Grades g;    
            if(count == 0){  
                JOptionPane.showMessageDialog(null, "There are no grades saved yet.", "Attention!", JOptionPane.WARNING_MESSAGE);
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");        
            }  
            //Displays all attendance 
            for (int i=0; i < count; i++){   
                g = grd[i];
                student = g.getStudent();
                sClass = g.getsClass();
                year = g.getYear();
                mathsGrade = g.getMathsGrade();
                sciGrade = g.getSciGrade();
                techGrade = g.getTechGrade();
                mathFeedBack = g.getMathFeedBack();
                sciFeedBack = g.getSciFeedBack();
                techFeedBack = g.getTechFeedBack();
                JOptionPane.showMessageDialog(null, "Student: "+student+"\nClass: "+sClass+"\nYear: "+year+"\n\nMaths grade: "+mathsGrade+"\nFeedback: "+mathFeedBack+"\n\nScience grade: "+sciGrade+"\nFeedback: "+sciFeedBack+"\n\nTechnology grade: "+techGrade+"\nFeedback: "+techFeedBack, "Student Information", JOptionPane.PLAIN_MESSAGE);            
                //Clears text fields
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
            }
        }
        
    }//GEN-LAST:event_btnDisplayKeyPressed

//Keypress-Enter-Search    
    private void btnSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSearchKeyPressed
    //search and edits grades   
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack; 
            Grades g;
            
            //Sets text from fields to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();
            mathsGrade = txtMathsGrade.getText();
            sciGrade = txtSciGrade.getText();
            techGrade = txtTechGrade.getText();
            mathFeedBack = txtMathFeedBack.getText();
            sciFeedBack = txtSciFeedBack.getText();
            techFeedBack = txtTechFeedBack.getText();  

            //If there are no attendance in array
            if(count == 0) {   
                JOptionPane.showMessageDialog(null, "Nothing to show");
                return;
            }
            //If no information is entered
            else if(student.isEmpty() && sClass.isEmpty() && year.isEmpty() && mathsGrade.isEmpty() && sciGrade.isEmpty() && techGrade.isEmpty() && mathFeedBack.isEmpty() && sciFeedBack.isEmpty() && techFeedBack.isEmpty()) {           
                JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }               
            //If any information is missing        
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
                JOptionPane.showMessageDialog(null, "You need to fill all fields to add grades for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            } 
            //Finds match        
            for (int i=0; i < count; i++){ 
                g = grd[i];
                if (student.equals(g.getStudent()) && sClass.equals(g.getsClass()) && year.equals(g.getYear()) && mathsGrade.equals(g.getStudent()) && sciGrade.equals(g.getsClass()) && techGrade.equals(g.getYear()) && mathFeedBack.equals(g.getStudent()) && sciFeedBack.equals(g.getsClass()) && techFeedBack.equals(g.getYear())){
                    student = g.getStudent();
                    sClass = g.getsClass();
                    year = g.getYear();
                    mathsGrade = g.getMathsGrade();
                    sciGrade =g.getSciGrade();
                    techGrade = g.getTechGrade();
                    mathFeedBack = g.getMathFeedBack();
                    sciFeedBack = g.getSciFeedBack();
                    techFeedBack = g.getTechFeedBack();
                    //Displays result, gives ok or edit option
                    Object[] options = {"Edit","ok"};
                    int reply = JOptionPane.showOptionDialog(null,"Student: "+student+"\nClass: "+sClass+"\nYear: "+year+"\n\nMaths grade: "+mathsGrade+"\nFeedback: "+mathFeedBack+"\n\nScience grade: "+sciGrade+"\nFeedback: "+sciFeedBack+"\n\nTechnology grade: "+techGrade+"\nFeedback: "+techFeedBack,"Search results",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                    //If edit is selected search results populate the text fiels
                    if(reply == JOptionPane.YES_OPTION) {
                        txtStudent.setText(student);
                        txtClass.setText(sClass);
                        txtYear.setText(year);
                        txtMathsGrade.setText(mathsGrade);
                        txtSciGrade.setText(sciGrade);
                        txtTechGrade.setText(techGrade);
                        txtMathFeedBack.setText(mathFeedBack);
                        txtSciFeedBack.setText(sciFeedBack);
                        txtTechFeedBack.setText(techFeedBack); 
                        //Removes matched result from array
                        for (int j=0; j < count; j++){ 
                        g = grd[j];
                            if (student.equals(g.getStudent()) && sClass.equals(g.getsClass()) && year.equals(g.getYear()) && mathsGrade.equals(g.getStudent()) && sciGrade.equals(g.getsClass()) && techGrade.equals(g.getYear()) && mathFeedBack.equals(g.getStudent()) && sciFeedBack.equals(g.getsClass()) && techFeedBack.equals(g.getYear())){                 
                                grd[j] = grd[count-1];
                                grd[count-1] = null;
                                count--;           
                            }               
                        }  
                        //Shows "finish edit" button hides others
                        btnFinishEdit.setVisible(true);
                        btnRemove.setVisible(false);
                        btnDisplay.setVisible(false);
                        btnSearch.setVisible(false);
                        btnSave.setVisible(false);
                        btnBack.setVisible(false);
                    }
                    //ok is selected, clears text and returns
                    if(reply == JOptionPane.NO_OPTION) { 
                        txtStudent.setText("");
                        txtClass.setText("");
                        txtYear.setText(""); 
                        txtMathsGrade.setText("");
                        txtSciGrade.setText("");
                        txtTechGrade.setText("");
                        txtMathFeedBack.setText("");
                        txtSciFeedBack.setText("");
                        txtTechFeedBack.setText("");
                        return;
                    }
                } 
                else{
                    JOptionPane.showMessageDialog(null, "No such user", "Attention!", JOptionPane.WARNING_MESSAGE);
                    txtStudent.setText("");
                    txtClass.setText("");
                    txtYear.setText(""); 
                    txtMathsGrade.setText("");
                    txtSciGrade.setText("");
                    txtTechGrade.setText("");
                    txtMathFeedBack.setText("");
                    txtSciFeedBack.setText("");
                    txtTechFeedBack.setText("");
                }
            } 
        }
        
    }//GEN-LAST:event_btnSearchKeyPressed

//Keypress-Enter-Save    
    private void btnSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveKeyPressed
    //Adds new attendance to array     
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){ 
            String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;
            Grades g;

            //If all text fields are empty
            if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty() && txtMathsGrade.getText().isEmpty() && txtSciGrade.getText().isEmpty() && txtTechGrade.getText().isEmpty() && txtMathFeedBack.getText().isEmpty() && txtSciFeedBack.getText().isEmpty() && txtTechFeedBack.getText().isEmpty()) {           
                JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            //If fields are part filled
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
                JOptionPane.showMessageDialog(null, "You need to fill all fields to add a grade for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }        
            //Sets text from fields to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();
            mathsGrade = txtMathsGrade.getText();
            sciGrade = txtSciGrade.getText();
            techGrade = txtTechGrade.getText();
            mathFeedBack = txtMathFeedBack.getText();
            sciFeedBack = txtSciFeedBack.getText();
            techFeedBack = txtTechFeedBack.getText();
            //makes new instance
            g = new Grades (student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack);

            JOptionPane.showMessageDialog(null, "Successfully added \""+student+"\" grades and feedback to database.", "Congratulations", JOptionPane.PLAIN_MESSAGE);

            grd[count] = g;
            count++; 
            //Clears text
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
            
        }
        
    }//GEN-LAST:event_btnSaveKeyPressed

//Keypress-Enter-FinishEdit
    private void btnFinishEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFinishEditKeyPressed
    //Adds newly edited grades to array    
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){ 
            String student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack;
            Grades g;
            //If all text fields are empty
            if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty() && txtMathsGrade.getText().isEmpty() && txtSciGrade.getText().isEmpty() && txtTechGrade.getText().isEmpty() && txtMathFeedBack.getText().isEmpty() && txtSciFeedBack.getText().isEmpty() && txtTechFeedBack.getText().isEmpty()) {           
                JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            //If fields are part filled
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty() || txtMathsGrade.getText().isEmpty() || txtSciGrade.getText().isEmpty() || txtTechGrade.getText().isEmpty() || txtMathFeedBack.getText().isEmpty() || txtSciFeedBack.getText().isEmpty() || txtTechFeedBack.getText().isEmpty()) {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText(""); 
                txtMathsGrade.setText("");
                txtSciGrade.setText("");
                txtTechGrade.setText("");
                txtMathFeedBack.setText("");
                txtSciFeedBack.setText("");
                txtTechFeedBack.setText("");
                JOptionPane.showMessageDialog(null, "You need to fill all fields to add a grade for a user", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }        
            //saves new edited user to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();
            mathsGrade = txtMathsGrade.getText();
            sciGrade = txtSciGrade.getText();
            techGrade = txtTechGrade.getText();
            mathFeedBack = txtMathFeedBack.getText();
            sciFeedBack = txtSciFeedBack.getText();
            techFeedBack = txtTechFeedBack.getText();
            //makes new instance
            g = new Grades (student, sClass, year, mathsGrade, sciGrade, techGrade, mathFeedBack, sciFeedBack, techFeedBack);

            JOptionPane.showMessageDialog(null, "Successfully edited \""+student+"\" and saved to database.", "Congratulations", JOptionPane.PLAIN_MESSAGE);

            grd[count] = g;
            count++; 
            //clears text fields
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
            txtMathsGrade.setText("");
            txtSciGrade.setText("");
            txtTechGrade.setText("");
            txtMathFeedBack.setText("");
            txtSciFeedBack.setText("");
            txtTechFeedBack.setText("");
            //Changes visability of other options back
            btnFinishEdit.setVisible(false);
            btnRemove.setVisible(true);
            btnDisplay.setVisible(true);
            btnSearch.setVisible(true);
            btnSave.setVisible(true);
            btnBack.setVisible(true); 
        }
        
    }//GEN-LAST:event_btnFinishEditKeyPressed

//Keypress-Enter-Back    
    private void btnBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBackKeyPressed
    //Navigates back to Admin    
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){        
            LayoutManager layout = getParent().getLayout();
            if (layout instanceof CardLayout) {
                CardLayout cl = (CardLayout)layout;
                cl.show(getParent(), "ADMIN");
            }
        }
        
    }//GEN-LAST:event_btnBackKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnFinishEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JLabel lblGrade;
    private javax.swing.JLabel lblGrades;
    private javax.swing.JLabel lblMaths;
    private javax.swing.JLabel lblScience;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblTechnology;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtClass;
    private javax.swing.JTextField txtMathFeedBack;
    private javax.swing.JTextField txtMathsGrade;
    private javax.swing.JTextField txtSciFeedBack;
    private javax.swing.JTextField txtSciGrade;
    private javax.swing.JTextField txtStudent;
    private javax.swing.JTextField txtTechFeedBack;
    private javax.swing.JTextField txtTechGrade;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
