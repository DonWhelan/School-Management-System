/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.SchoolManagmentSystem.GUI;
import ie.SchoolManagmentSystem.Students;
import java.awt.CardLayout;
import java.awt.LayoutManager;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JOptionPane;
import java.util.Arrays;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;


/**
 *
 * @author Don
 */
public class AdministrationPanelEditStudents extends javax.swing.JPanel {

    Students std[];
    int count = 0;
    
    //arrarlist<customer> customers;
      
    final private String fileName = "StudentInfo.data";

    public AdministrationPanelEditStudents() {
        initComponents();
        
        btnFinishEdit.setVisible(false);
        
        std = new Students[100];
        count = 0; 
        
        //customers = new ArrarList<Customer>();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        txtStudent = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        txtClass = new javax.swing.JTextField();
        lblYear = new javax.swing.JLabel();
        btnDisplay = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        lblHeader = new javax.swing.JLabel();
        lblStudent = new javax.swing.JLabel();
        lblClass = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnFinishEdit = new javax.swing.JButton();
        btnSaveToDisc = new javax.swing.JButton();
        ReadFromDusc = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setLayout(null);
        add(txtStudent);
        txtStudent.setBounds(125, 140, 250, 25);
        add(txtYear);
        txtYear.setBounds(125, 220, 250, 25);
        add(txtClass);
        txtClass.setBounds(125, 180, 250, 25);

        lblYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblYear.setForeground(new java.awt.Color(204, 204, 204));
        lblYear.setText("Year");
        add(lblYear);
        lblYear.setBounds(80, 220, 31, 17);

        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });
        btnDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDisplayKeyPressed(evt);
            }
        });
        add(btnDisplay);
        btnDisplay.setBounds(350, 330, 100, 28);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        btnSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSearchKeyPressed(evt);
            }
        });
        add(btnSearch);
        btnSearch.setBounds(200, 330, 100, 28);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        btnAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAddKeyPressed(evt);
            }
        });
        add(btnAdd);
        btnAdd.setBounds(300, 390, 100, 28);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        btnRemove.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnRemoveKeyPressed(evt);
            }
        });
        add(btnRemove);
        btnRemove.setBounds(50, 330, 100, 28);

        lblHeader.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(204, 204, 204));
        lblHeader.setText("Edit Students");
        add(lblHeader);
        lblHeader.setBounds(170, 30, 180, 29);

        lblStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudent.setForeground(new java.awt.Color(204, 204, 204));
        lblStudent.setText("Student");
        add(lblStudent);
        lblStudent.setBounds(60, 140, 60, 17);

        lblClass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblClass.setForeground(new java.awt.Color(204, 204, 204));
        lblClass.setText("Class");
        add(lblClass);
        lblClass.setBounds(80, 180, 35, 17);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        btnBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBackKeyPressed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(100, 390, 100, 28);

        btnFinishEdit.setText("Finish Edit");
        btnFinishEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishEditActionPerformed(evt);
            }
        });
        btnFinishEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFinishEditKeyPressed(evt);
            }
        });
        add(btnFinishEdit);
        btnFinishEdit.setBounds(200, 280, 100, 28);

        btnSaveToDisc.setText("Save");
        btnSaveToDisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToDiscActionPerformed(evt);
            }
        });
        add(btnSaveToDisc);
        btnSaveToDisc.setBounds(220, 460, 57, 23);

        ReadFromDusc.setText("display saved");
        ReadFromDusc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadFromDuscActionPerformed(evt);
            }
        });
        add(ReadFromDusc);
        ReadFromDusc.setBounds(220, 510, 120, 23);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie/SchoolManagmentSystem/GUI/ExamsAppBackground.png"))); // NOI18N
        add(lblBackground);
        lblBackground.setBounds(0, 0, 500, 700);
    }// </editor-fold>//GEN-END:initComponents

//MouseClick-Add      
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
    //Adds new student to array  
        String student, sClass, year;
        Students s;
        //If all text fields are empty
        if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty()) {           
            JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //If fields are part filled
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");            
            JOptionPane.showMessageDialog(null, "You need to fill all fields to add a user", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }        
        //Sets text from fields to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();
        //makes new instance
        s = new Students (student, sClass, year);

        JOptionPane.showMessageDialog(null, "Successfully added "+student+" to database.", "Congratulations", JOptionPane.PLAIN_MESSAGE);
        
        std[count] = s;
        count++; 
        //Clears text
        txtStudent.setText("");
        txtClass.setText("");
        txtYear.setText("");
        
    }//GEN-LAST:event_btnAddActionPerformed

//MouseClick-Search      
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
    /*
     *Searches for matches in array and displays match to user.
     *Gives option to exit or edit.
     *On edit the searched user is deleted from array and details left in text fields to edit. 
     *All buttons are hidden bar "finish Edit" which save the edited user back to the array.
     */
        String student, sClass, year; 
        Students s;
        
        //Sets text from fields to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();            
        
        //if no information is entered
        if(student.isEmpty() && sClass.isEmpty() && year.isEmpty()){              
            JOptionPane.showMessageDialog(null, "You have not entered any information.", "Attention!", JOptionPane.WARNING_MESSAGE); 
            return;
        }
        //if any information is missing
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "You need to fill all fields to search.", "Attention!", JOptionPane.WARNING_MESSAGE); 
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");  
            return;
        }
        //finds match
        for (int i=0; i < count; i++){ 
            s = std[i];
            if (student.equals(s.getStudent()) && sClass.equals(s.getsClass()) && year.equals(s.getYear())){
                student = s.getStudent();
                sClass = s.getsClass();
                year = s.getYear();

                /*
                 *yes/no buttons custom text code modified from:
                 * http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html  
                 */

                // displays result, gives ok or edit option
                Object[] options = {"Edit","ok"};
                int reply = JOptionPane.showOptionDialog(null,"Student: "+student+"\nClass: "+sClass+"\nYear: "+year,"Search results",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                //If edit is selected then search results populate the text fields
                if(reply == JOptionPane.YES_OPTION) {
                    txtStudent.setText(student);
                    txtClass.setText(sClass);
                    txtYear.setText(year);
                    //removes matched result from database
                    for (int j=0; j < count; j++){ 
                    s = std[j];
                        if (student.equals(s.getStudent()) && sClass.equals(s.getsClass()) && year.equals(s.getYear())){                 
                            std[j] = std[count-1];
                            std[count-1] = null;
                            count--;           
                        }               
                    }  
                    //shows edit button hides others
                    btnFinishEdit.setVisible(true);
                    btnRemove.setVisible(false);
                    btnDisplay.setVisible(false);
                    btnSearch.setVisible(false);
                    btnAdd.setVisible(false);
                    btnBack.setVisible(false);
                }
                //ok is selected, clears text and returns
                if(reply == JOptionPane.NO_OPTION) { 
                    txtStudent.setText("");
                    txtClass.setText("");
                    txtYear.setText(""); 
                    return;
                }
            } 
            else{
                JOptionPane.showMessageDialog(null, "No such user", "Attention!", JOptionPane.WARNING_MESSAGE); 
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
            }
        }         
              
    }//GEN-LAST:event_btnSearchActionPerformed

//MouseClick-Display      
    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
    //Displays all students 
        String student, sClass, year;
        Students s;    
        //if no user have been saved
        if(count == 0){  
            JOptionPane.showMessageDialog(null, "Ther are no users saved yet.", "Attention!", JOptionPane.WARNING_MESSAGE);
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
        }  
        //Displays all attendance 
        for (int i=0; i < count; i++){   
            s = std[i];
            student = s.getStudent();
            sClass = s.getsClass();
            year = s.getYear();
            JOptionPane.showMessageDialog(null, "Student: "+student+"\nClass: "+sClass+"\nYear: "+year, "Student Information", JOptionPane.PLAIN_MESSAGE);            
            //Clears text fields
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
        }
        //Clears text fields
        txtStudent.setText("");
        txtClass.setText("");
        txtYear.setText("");

    }//GEN-LAST:event_btnDisplayActionPerformed

//MouseClick-Remove      
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    //deletes user from array
        String student, sClass, year; 
        Students s;
        //Sets text from fields to array
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText(); 
        //If no information is entered to text fields 
        if(student.isEmpty() && sClass.isEmpty() && year.isEmpty()){              
            JOptionPane.showMessageDialog(null, "You have not entered any information.", "Attention!", JOptionPane.WARNING_MESSAGE); 
            return;
        }
        //If only part information is entered to text fields 
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "You need to fill all fields to remove a user.", "Attention!", JOptionPane.WARNING_MESSAGE); 
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");  
            return;
        }  
       
        /*
         *code modified from http://stackoverflow.com/questions/8396870/joptionpane-yes-or-no-window
         */

        //Removes Student
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Delete user", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "User Removed from database", "Attention!", JOptionPane.WARNING_MESSAGE); 
            for (int i=0; i < count; i++){ 
                s = std[i];
                if (student.equals(s.getStudent()) && sClass.equals(s.getsClass()) && year.equals(s.getYear())){                 
                    std[i] = std[count-1];
                    std[count-1] = null;
                    count--;           
                }               
            }
            //Clears text
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
        }
        //Clears text
        else {
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
        }
      
    }//GEN-LAST:event_btnRemoveActionPerformed

//MouseClick-Back    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
    //Navigates back to Admin     
        LayoutManager layout = getParent().getLayout();
        if (layout instanceof CardLayout) {
            CardLayout cl = (CardLayout)layout;
            cl.show(getParent(), "ADMIN");
        }
        
    }//GEN-LAST:event_btnBackActionPerformed

//MouseClick-Finish Edit    
    private void btnFinishEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishEditActionPerformed
    //Adds newly edited student to array      
        String student, sClass, year;
        Students s;
        //if no information is entered
        if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty()) {           
            JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //if not all fields are filled
        else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {            
            JOptionPane.showMessageDialog(null, "You need to fill all fields to finish adding a user", "Attention!", JOptionPane.WARNING_MESSAGE);
            return;
        }        
        //saves new edited user to array 
        student = txtStudent.getText();
        sClass = txtClass.getText();
        year = txtYear.getText();

        s = new Students (student, sClass, year);

        JOptionPane.showMessageDialog(null, "Successfully edited "+student, "Congratulations", JOptionPane.PLAIN_MESSAGE);
        
        std[count] = s;
        count++; 
        //clears text fields
        txtStudent.setText("");
        txtClass.setText("");
        txtYear.setText("");
        //Changes visability of other options back
        btnFinishEdit.setVisible(false);
        btnRemove.setVisible(true);
        btnDisplay.setVisible(true);
        btnSearch.setVisible(true);
        btnAdd.setVisible(true);
        btnBack.setVisible(true);
        
    }//GEN-LAST:event_btnFinishEditActionPerformed

//Keypress-Enter-Remove    
    private void btnRemoveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnRemoveKeyPressed
    //deletes user from array        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String student, sClass, year; 
            Students s;
            //Sets text from fields to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText(); 
            //If no information is entered to text fields 
            if(student.isEmpty() && sClass.isEmpty() && year.isEmpty()){              
                JOptionPane.showMessageDialog(null, "You have not entered any information.", "Attention!", JOptionPane.WARNING_MESSAGE); 
                return;
            }
            //If only part information is entered to text fields 
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "You need to fill all fields to remove a user.", "Attention!", JOptionPane.WARNING_MESSAGE); 
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");  
                return;
            }  

            /*
             *code modified from http://stackoverflow.com/questions/8396870/joptionpane-yes-or-no-window
             */

            //Removes Student
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Delete user", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "User Removed from database", "Attention!", JOptionPane.WARNING_MESSAGE); 
                for (int i=0; i < count; i++){ 
                    s = std[i];
                    if (student.equals(s.getStudent()) && sClass.equals(s.getsClass()) && year.equals(s.getYear())){                 
                        std[i] = std[count-1];
                        std[count-1] = null;
                        count--;           
                    }               
                }
                //Clears text
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
            }
            //Clears text
            else {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
            }
        }
        
    }//GEN-LAST:event_btnRemoveKeyPressed

//Keypress-Enter-Display    
    private void btnDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDisplayKeyPressed
    //Displays all students        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String student, sClass, year;
            Students s;    
            //if no user have been saved
            if(count == 0){  
                JOptionPane.showMessageDialog(null, "Ther are no users saved yet.", "Attention!", JOptionPane.WARNING_MESSAGE);
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
            }  
            //Displays all attendance 
            for (int i=0; i < count; i++){   
                s = std[i];
                student = s.getStudent();
                sClass = s.getsClass();
                year = s.getYear();
                JOptionPane.showMessageDialog(null, "Student: "+student+"\nClass: "+sClass+"\nYear: "+year, "Student Information", JOptionPane.PLAIN_MESSAGE);            
                //Clears text fields
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");
            }
            //Clears text fields
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");  
        }
        
    }//GEN-LAST:event_btnDisplayKeyPressed

//Keypress-Enter-Search    
    private void btnSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSearchKeyPressed
    /*
     *Searches for matches in array and displays match to user.
     *Gives option to exit or edit.
     *On edit the searched user is deleted from array and details left in text fields to edit. 
     *All buttons are hidden bar "finish Edit" which save the edited user back to the array.
     */        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String student, sClass, year; 
            Students s;

            //Sets text from fields to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();            

            //if no information is entered
            if(student.isEmpty() && sClass.isEmpty() && year.isEmpty()){              
                JOptionPane.showMessageDialog(null, "You have not entered any information.", "Attention!", JOptionPane.WARNING_MESSAGE); 
                return;
            }
            //if any information is missing
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "You need to fill all fields to search.", "Attention!", JOptionPane.WARNING_MESSAGE); 
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");  
                return;
            }
            //finds match
            for (int i=0; i < count; i++){ 
                s = std[i];
                if (student.equals(s.getStudent()) && sClass.equals(s.getsClass()) && year.equals(s.getYear())){
                    student = s.getStudent();
                    sClass = s.getsClass();
                    year = s.getYear();

                    /*
                     *yes/no buttons custom text code modified from:
                     * http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html  
                     */

                    // displays result, gives ok or edit option
                    Object[] options = {"Edit","ok"};
                    int reply = JOptionPane.showOptionDialog(null,"Student: "+student+"\nClass: "+sClass+"\nYear: "+year,"Search results",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                    //If edit is search results populate the text fiels
                    if(reply == JOptionPane.YES_OPTION) {
                        txtStudent.setText(student);
                        txtClass.setText(sClass);
                        txtYear.setText(year);
                        //removes matched result from database
                        for (int j=0; j < count; j++){ 
                            s = std[j];
                            if (student.equals(s.getStudent()) && sClass.equals(s.getsClass()) && year.equals(s.getYear())){                 
                                std[j] = std[count-1];
                                std[count-1] = null;
                                count--;           
                            }               
                        }  
                        //shows edit button hides others
                        btnFinishEdit.setVisible(true);
                        btnRemove.setVisible(false);
                        btnDisplay.setVisible(false);
                        btnSearch.setVisible(false);
                        btnAdd.setVisible(false);
                        btnBack.setVisible(false);
                    }
                    //ok is selected, clears text and returns
                    if(reply == JOptionPane.NO_OPTION) { 
                        txtStudent.setText("");
                        txtClass.setText("");
                        txtYear.setText(""); 
                        return;
                    }
                } 
                else{
                    JOptionPane.showMessageDialog(null, "No such user", "Attention!", JOptionPane.WARNING_MESSAGE); 
                    txtStudent.setText("");
                    txtClass.setText("");
                    txtYear.setText("");
                }
            }     
        }
        
    }//GEN-LAST:event_btnSearchKeyPressed

//Keypress-Enter-Add     
    private void btnAddKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAddKeyPressed
    //Adds new student to array         
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){ 
            String student, sClass, year;
            Students s;
            //If all text fields are empty
            if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty()) {           
                JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            //If fields are part filled
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {
                txtStudent.setText("");
                txtClass.setText("");
                txtYear.setText("");            
                JOptionPane.showMessageDialog(null, "You need to fill all fields to add a user", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }        
            //Sets text from fields to array
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();
            //makes new instance
            s = new Students (student, sClass, year);

            JOptionPane.showMessageDialog(null, "Successfully added "+student+" to database.", "Congratulations", JOptionPane.PLAIN_MESSAGE);

            std[count] = s;
            count++; 
            //Clears text
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");   
        }
    }//GEN-LAST:event_btnAddKeyPressed

//Keypress-Enter-FinishEdit    
    private void btnFinishEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFinishEditKeyPressed
    //Adds newly edited student to array       
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){      
            String student, sClass, year;
            Students s;
            //if no information is entered
            if(txtStudent.getText().isEmpty() && txtClass.getText().isEmpty() && txtYear.getText().isEmpty()) {           
                JOptionPane.showMessageDialog(null, "You have not entered any information", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            //if not all fields are filled
            else if(txtStudent.getText().isEmpty() || txtClass.getText().isEmpty() || txtYear.getText().isEmpty()) {            
                JOptionPane.showMessageDialog(null, "You need to fill all fields to finish adding a user", "Attention!", JOptionPane.WARNING_MESSAGE);
                return;
            }        
            //saves new edited user to array 
            student = txtStudent.getText();
            sClass = txtClass.getText();
            year = txtYear.getText();

            s = new Students (student, sClass, year);

            JOptionPane.showMessageDialog(null, "Successfully edited "+student, "Congratulations", JOptionPane.PLAIN_MESSAGE);

            std[count] = s;
            count++; 
            //clears text fields
            txtStudent.setText("");
            txtClass.setText("");
            txtYear.setText("");
            //Changes visability of other options back
            btnFinishEdit.setVisible(false);
            btnRemove.setVisible(true);
            btnDisplay.setVisible(true);
            btnSearch.setVisible(true);
            btnAdd.setVisible(true);
            btnBack.setVisible(true);
          
        }  
    }//GEN-LAST:event_btnFinishEditKeyPressed

//Keypress-Enter-Back    
    private void btnBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBackKeyPressed
    //Navigates back to Admin     
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){    
            LayoutManager layout = getParent().getLayout();
            if (layout instanceof CardLayout) {
                CardLayout cl = (CardLayout)layout;
                cl.show(getParent(), "ADMIN");
            }
        }
        
    }//GEN-LAST:event_btnBackKeyPressed

//MouseClick-Save Array    
    private void btnSaveToDiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToDiscActionPerformed
    //Saves Array "std" to disc in file studentInfo.data"
        File outFile;
        FileOutputStream fStream;
        ObjectOutputStream oStream;

        try{
            outFile = new File("studentInfo.data");
            fStream = new FileOutputStream(outFile);
            oStream = new ObjectOutputStream(fStream);

            oStream.writeObject(std);

            JOptionPane.showMessageDialog(null, "Successfully saved to disc ", "Congratulations", JOptionPane.PLAIN_MESSAGE);

            oStream.close();
        }
        catch (IOException e){
            JOptionPane.showMessageDialog(null, "error", "Congratulations", JOptionPane.PLAIN_MESSAGE);
        }

        
    }//GEN-LAST:event_btnSaveToDiscActionPerformed

//READ ARRAY ??????    
    private void ReadFromDuscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadFromDuscActionPerformed
   /* 
  
    try{
        FileInputStream fis = new FileInputStream("studentInfo.data");
        ObjectInputStream in = new ObjectInputStream(fis);
        while(true){
            Students s = (Students)in.readObject();
            
            Students.add(student);
        }
        
    }
    
    
    
    catch(EOFException ex){
    JOptionPane.showMessageDialog(null, "error", "Congratulations", JOptionPane.PLAIN_MESSAGE);
    }
    catch(IOException ex){
        JOptionPane.showMessageDialog(null, "error", "Congratulations", JOptionPane.PLAIN_MESSAGE);
    }
        
        
        
        
     -------------------------------------------------------------------------------------------------------------------------------   
        
        
        
        
        /*
               
               ObjectInputStream in = null;
          String student, sClass, year; 
        Students s;
        
        JOptionPane.showMessageDialog(null, "Loading from working directory = " + System.getProperty("user.dir"));   
                    
        try {
            
            in = new ObjectInputStream(new FileInputStream(this.fileName)); 
        
            try {

                Students s = null;            
                
                this.std.clear(); // Clear the list to previent duplication

                // Read the data and display on the console
                while (true) {

                    Object obj = in.readObject();
                    
                    e = (Employee)obj;
                    this.empList.add(e);
                }            
            }
            catch(Exception ex) {
                
                JOptionPane.showMessageDialog(null, "Deserialision Error : " + ex.getMessage());
            }
                    
        }
        catch(Exception ex) {
            
            JOptionPane.showMessageDialog(null, "Deserialision Error : " + ex.getMessage());
        }
        finally {
            
            if (in != null) {

                try {
                    
                    in.close();
                }
                catch(Exception ex) {

                    JOptionPane.showMessageDialog(null, "Deserialision Stream Close Error : " + ex.getMessage());
                }
            }
        }
        
        
        ===========================================================================================
        
    FileInputStream fStream;
    ObjectInputStream oStream;
    ObjectInputStream in = null;
    
    
    
    try{
        inFile = new File("studentInfo.data");
        fStream = new FileInputStream(inFile);
        oStream = new ObjectInputStream(fStream);
        
        
        for (int i = 0; i < Students.lenght; i++){
            std[i] = (Students)oStream.readObject();
        }
        
        //Students = std oStream.readObject();
        
        //action ??

          
        
         oStream.close();
    }
    catch (Exception e){
        JOptionPane.showMessageDialog(null, "error", "Congratulations", JOptionPane.PLAIN_MESSAGE);
    }
    /*catch (ClassNotFoundException ex){
        JOptionPane.showMessageDialog(null, "error", "Congratulations", JOptionPane.PLAIN_MESSAGE);
    }
 

    -----------------------------------------------------------------------------------------------------------
        
        
        

        ObjectInputStream in = null;
        
        JOptionPane.showMessageDialog(null, "Loading from working directory = " + System.getProperty("user.dir"));   
                    
        try {
            
            in = new ObjectInputStream(new FileInputStream(this.fileName)); 
        
            try {

                std s = null;            
                
                this.std.clear(); // Clear the list to previent duplication

                // Read the data and display on the console
                while (true) {

                    Object obj = in.readObject();
                    
                    s = (Students)obj;
                    this.std.add(s);
                }            
            }
            catch(ClassCastException ex) {
                
                JOptionPane.showMessageDialog(null, "Deserialision Error : " + ex.getMessage());
            }
            catch (ClassNotFoundException ex) {
                
                JOptionPane.showMessageDialog(null, "Deserialision Error : " + ex.getMessage());
            }
            catch (EOFException ex) {   // Notice that ObjectInputStream detects an end-of-file condition by catching EOFException, 
                                        // instead of testing for an invalid return value.
                
                // ex.getMessage() will return "Deserialization error: null" e.g. it is not an error.
                // This means that we have reached the end of the file.
                JOptionPane.showMessageDialog(null, "Loaded " + this.std.size + " objects sucessfully."); 
            }         
        }
        catch(IOException ex) {
            
            JOptionPane.showMessageDialog(null, "Deserialision Error : " + ex.getMessage());
        }
        finally {
            
            if (in != null) {

                try {
                    
                    in.close();
                }
                catch(IOException ex) {

                    JOptionPane.showMessageDialog(null, "Deserialision Stream Close Error : " + ex.getMessage());
                }
            }
        }
    */
    }//GEN-LAST:event_ReadFromDuscActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ReadFromDusc;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnFinishEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSaveToDisc;
    private javax.swing.JButton btnSearch;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtClass;
    private javax.swing.JTextField txtStudent;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
